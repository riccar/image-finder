{"version":3,"sources":["api/unsplash.js","components/UI/Segment.js","components/UI/Form.js","components/SearchBar.js","components/UI/Grid.js","components/UI/Card.js","components/ImageCard.js","components/ImageGrid.js","components/UI/Container.js","components/UI/Spinner.js","components/GlobalStyle.js","components/App.js","components/UI/theme.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","Segment","styled","div","_templateObject","props","theme","borderColor","Form","form","Form_templateObject","FormGroup","_templateObject2","FormText","small","_templateObject3","FormLabel","label","_templateObject4","SearchBar","_useState","useState","_useState2","Object","slicedToArray","term","setTerm","react_default","a","createElement","UI_Segment","UI_Form","onSubmit","e","preventDefault","type","value","onChange","target","Grid","Grid_templateObject","Card","Card_templateObject","gridSpan","Text","Card_templateObject2","memo","spans","setSpans","imageRef","useRef","useEffect","calcSpans","calculateSpans","current","addEventListener","imgRef","removeEventListener","_props$image","image","alt_description","urls","user","UI_Card","ref","alt","src","regular","name","height","clientHeight","Math","ceil","ImageGrid","images","map","components_ImageCard","key","id","Fragment","UI_Grid","Container","section","Container_templateObject","SpinnerBox","Spinner_templateObject","PulseContainer","Spinner_templateObject2","PulseBubble","Spinner_templateObject3","ease","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","App","setImages","_useState3","_useState4","page","setPage","_useState5","_useState6","_useInView","useInView","threshold","_useInView2","inView","onSearchSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","newPage","response","wrap","_context","prev","next","unsplash","get","params","query","per_page","sent","data","results","prevState","concat","toConsumableArray","stop","_x","_x2","apply","this","arguments","UI_Container","components_GlobalStyle","components_SearchBar","components_ImageGrid","UI_Spinner","ReactDOM","render","styled_components_browser_esm","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.6e06902d.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://api.unsplash.com',\n  headers: {\n    Authorization: 'Client-ID 63ff086a0ebb7770e3d867bca4805c9fcef30315e95e45852157789218eb1cbd'\n  }\n});","import styled from 'styled-components';\n\nconst Segment = styled.div`\t\n\tbackground: white;\n\tmargin: 1rem 1rem;\n\tpadding: 1rem 1rem;\n\tborder-radius: .3rem;\n  border: 1px solid ${props => props.theme.borderColor};\n  display: flex;\n  align-items: center;\n  justify-content: center;  \n`;\n\nexport default Segment;","import styled from 'styled-components';\n\nconst Form = styled.form`\n\n  width: 100%;\n\n  & input[type='text'],\n  & input[type='email'],\n  & input[type='password'],\n  & input[type='date'],\n  & select,\n  & textarea {\n    display: block;\n    width: 100%;\n    padding: 0.4rem;\n    font-size: 1.2rem;\n    border-radius: .3rem;\n\t  border: 1px solid ${props => props.theme.borderColor};\n  }\n`;\n\nconst FormGroup =styled.div`\n  margin: .5rem 0;\n`;\n\nconst FormText = styled.small`\n  display: block;\n  margin-top: 0.3rem;\n  color: #888;\n`;\n\nconst FormLabel = styled.label`\n  margin-bottom: 0.3rem;\n`;\n\nForm.FormText = FormText;\nForm.FormGroup = FormGroup;\nForm.FormLabel = FormLabel;\n\nexport default Form;","import React, { useState } from 'react';\n\nimport Segment from './UI/Segment';\nimport Form from './UI/Form';\n\nconst SearchBar = (props) => {\n\n  //useState hook to handle state for functional components\n  const [ term, setTerm ] = useState('Ecology');\n\n  /*in JS the value \"this\" needs to be bind to the function to avoid\n  undefined errors when called externally. By using arrow functions, the binding happens\n  automatically.\n  */\n  const onFormSubmit = e => {\n    e.preventDefault();\n    props.onSubmit(term, 1);\n  }\n\n  /*onFormSubmit called via onSubmit event should not have parenthesis \n    When it's required to work as a callback after an event happens.\n    If the parenthesis are added, the function will be called when\n    the component is rendered.\n    Other event property names: onClick, onChange, onSubmit\n  */\n\n  //Input is a controlled element since the component \n  //state controls what is saved and shown in the input\n  \n  return (\n    <Segment>\n      <Form onSubmit={onFormSubmit}>\n        <Form.FormLabel>Image Search</Form.FormLabel>\n        <input \n          type=\"text\"\n          value={term} \n          onChange={e => setTerm(e.target.value)} \n        />\n      </Form>\n    </Segment>\n  )\n} \n\nexport default SearchBar;","import styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  /*minmax column width min 250px and max 1fr = for every column make it of equal size*/\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); \n  /*grid-gap: 0px 0px;*/\n  /*Every grid element is set to 10px height*/\n  grid-auto-rows: 10px;\n`;\n\nexport default Grid;","import styled from 'styled-components';\n\nconst Card = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  grid-row-end: span ${props => props.gridSpan};\n  position: relative;\n\n  & img {\n    width: 250px;\n    grid-row-end: span 2;\n  }\n`;\n\nconst Text = styled.div`\n  position: absolute;\n  width: 250px;\n  bottom: 8px;\n  background: rgba(0,0,0,0.7);\n  color: white;\n  font-size: .7em;\n  padding: 1em;\n`;\n\nCard.Text = Text\n\nexport default Card;","import React, { useState, useEffect, useRef, memo } from 'react';\n//import useCalculateSpans from './helpers/useCalculateSpans';\n\nimport Card from './UI/Card'\n\n/**\n * After the image card render itself reach into the DOM and figure out its height\n * Set the image height on state to re-render component\n * On the second render assign a grid-row-end enough space so it's properly\n * spawned on multiple rows according to its height\n */\nconst ImageCard = (props) => {\n\n  const [spans, setSpans] = useState(0);\n\n  //useRef to hold the reference of an DOM object\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    const calcSpans = () => {\n      setSpans(calculateSpans(imageRef));\n    }\n    \n    //Add a JS load event listener\n    imageRef.current.addEventListener('load', calcSpans);\n    let imgRef = imageRef.current;\n    return () => {\n      imgRef.removeEventListener('load', calcSpans);\n    }\n  }, []); //Empty array to execute this useEffect only one time*/\n\n /* const [imageRef, spans] =  useCalculateSpans();\n  console.log(imageRef,spans);*/\n  \n  const { alt_description, urls, user } = props.image;\n\n  return (\n    <Card gridSpan={spans}>\n      <img \n        ref={imageRef} \n        alt={alt_description}\n        src={urls.regular}\n      />\n      <Card.Text>\n        <p>{alt_description}</p>\n        <p>By {user.name}</p>\n      </Card.Text>\n    </Card>\n  );\n\n}\n\nexport default memo(ImageCard);\n\n//Helper function\nconst calculateSpans = (imageRef) => {\n  const height = imageRef.current.clientHeight;\n  /**\n   * Divide image height between 10 to produce a proper \n   * span. So if img is 10px height, its span becomes 1 so it \n   * remains in one grid cell, but if its height is more than than \n   * it spans becomes 2 or more so taller images are \n   * spanned on multiple cells.\n   * Add plus one to the end to round always to the next available cell\n   * to avoid overlaps\n   */\n  return Math.ceil(height / 10 + 1);\n  \n}","import React from 'react';\n\nimport Grid from './UI/Grid';\nimport ImageCard from './ImageCard';\n\nconst ImageGrid = props => {\n \n  const images = props.images.map( image => {\n    return <ImageCard key={image.id} image={image} />\n  });\n\n  return (\n    <>\n      <Grid>{images}</Grid>\n    </>\n  )\n    \n};\n\nexport default ImageGrid;","import styled from 'styled-components';\n\nconst Container = styled.section`\n  margin: 20px auto;\n  width: 90vw;\n  max-width: 1200px;\n`;\n\nexport default Container;","import React, { memo } from 'react';\nimport styled from 'styled-components';\n\nconst SpinnerBox = styled.div`\n  height: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: transparent;\n`;\n\nconst PulseContainer = styled.div`\n  width: 120px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst PulseBubble = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: #3ff9dc;\n  animation: pulse .4s ease ${props => props.ease} infinite alternate;\n  @keyframes pulse {\n  from {\n    opacity: 1;\n    transform: scale(1);\n  }\n  to {\n    opacity: .25;\n    transform: scale(.75);\n  }\n}\n`;\n\nconst Spinner = () => {\n\n  return (\n    <SpinnerBox >\n      <PulseContainer >  \n        <PulseBubble ease=\"0s\" />\n        <PulseBubble ease=\".2s\" />\n        <PulseBubble ease=\".4s\" />\n      </PulseContainer>\n    </SpinnerBox>\n  )\n}\n\nexport default memo(Spinner);","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n  outline: none;\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  position: relative;\n  -webkit-tap-highlight-color: rgba(0,0,0,0); /*avoid grey div bg on tab*/\n}\n\nimg {\n  outline: none;\n}\n\nbody {\n  font-family: \"Lato\", sans-serif;\n  /*overflow: hidden;*/\n}\n`;\n\nexport default GlobalStyle;","import React, { useState, useEffect } from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nimport unsplash from '../api/unsplash';\nimport SearchBar from './SearchBar';\nimport ImageGrid from './ImageGrid';\nimport Container from './UI/Container'; \nimport Spinner from './UI/Spinner';\n\nimport GlobalStyle from './GlobalStyle';\n\nconst App = () => {\n\n  //Set arrays as empty to avoid null errors\n  const [images, setImages ] = useState([]);\n  const [page, setPage] = useState(1);\n  const [term, setTerm] = useState('Ecology')\n\n  //InView Hook from interaction-observer\n  //Defines the observer to be triggered\n  //when a particular dom element link to ref\n  //is visible in the viewport\n  const [ref, inView] = useInView({\n    /* Optional options */\n    threshold: 1,\n  });\n\n  /**Use async/await to wait for the response to be received \n   * so it can be sent over to other components.\n   * \n   * Use arrow function to ensure \"this\" references this component\n   * and not the onSubmit that is calling the function\n   */\n  const onSearchSubmit = async (term, newPage) => {\n    setTerm(term);\n    const response =  await unsplash.get('/search/photos', {\n      params: { query: term, page: newPage, per_page: 15 }\n    });\n    //On every new search, newPage = 1 and the image state is reset.\n    if (newPage === 1) setImages(response.data.results);\n    else setImages(prevState => [...prevState, ...response.data.results]);\n    //console.log(response)\n  }\n\n  useEffect(() => {\n    setPage(page + 1);\n    if (inView) {\n      onSearchSubmit(term, page);\n    }\n  }, [inView]); //inView changes to true when the item is in the viewport and it changes to false otherwise\n\n  return ( \n    <Container>\n      <GlobalStyle />\n      <SearchBar onSubmit={onSearchSubmit} />\n      <ImageGrid images={images}/>\n      <div ref={ref}>\n        <Spinner  />\n      </div>\n      \n\n    </Container>\n  );\n  \n}\n\nexport default App;","const theme = {\n  borderColor: 'rgba(34,36,38,.15);'\n}\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ThemeProvider} from 'styled-components';\n\nimport App from './components/App';\nimport theme from './components/UI/theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\ndocument.querySelector('#root'));"],"sourceRoot":""}